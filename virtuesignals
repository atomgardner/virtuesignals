#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-2.0 or CC0-1.0

import curses
import datetime
import os
import pickle
import sys

import xdg  # TODO: make this portable

virtuedir = xdg.XDG_DATA_HOME / "virtuesignals"
days = ("Mon ", "Tue ", "Wed ", "Thu ", "Fri ", "Sat ", "Sun")

virtues = (
    "Temperance",
    "Silence",
    "Order",
    "Resolution",
    "Frugality",
    "Industry",
    "Sincerity",
    "Justice",
    "Moderation",
    "Cleanliness",
    "Tranquillity",
    "Chastity",
    "Humility",
)

precepts = (
    """
    Eat not to dullness; drink not to elevation.
    """,

    """
    Speak not but what may benefit others or yourself; avoid trifling
    conversation.
    """,

    """
    Let all your things have their places; let each part of your business
    have its time.
    """,

    """
    Resolve to perform what you ought; perform without fail what you
    resolve.
    """,

    """
    Make no expense but to do good to others or yourself; i.e., waste
    nothing.
    """,

    """
    Lose no time; be always employ’d in something useful; cut off all
    unnecessary actions.
    """,

    """
    Use no hurtful deceit; think innocently and justly, and, if you speak,
    speak accordingly.
    """,

    """
    Wrong none by doing injuries, or omitting the benefits that are your
    duty.
    """,

    """
    Avoid extreams; forbear resenting injuries so much as you think they
    deserve.
    """,

    """
    Tolerate no uncleanliness in body, cloaths, or habitation.
    """,

    """
    Be not disturbed at trifles, or at accidents common or unavoidable.
    """,

    """
    Rarely use venery but for health or offspring, never to dulness,
    weakness, or the injury of your own or another’s peace or reputation.
    """,

    """
    Imitate Jesus and Socrates.
    """,
)

# Franklin writes that a clean and unmarked book signifies purity.
pretty_binary = (
    "⠀⠁⠂⠃⠄⠅⠆⠇⡀⡁⡂⡃⡄⡅⡆⡇"
    "⠈⠉⠊⠋⠌⠍⠎⠏⡈⡉⡊⡋⡌⡍⡎⡏"
    "⠐⠑⠒⠓⠔⠕⠖⠗⡐⡑⡒⡓⡔⡕⡖⡗"
    "⠘⠙⠚⠛⠜⠝⠞⠟⡘⡙⡚⡛⡜⡝⡞⡟"
    "⠠⠡⠢⠣⠤⠥⠦⠧⡠⡡⡢⡣⡤⡥⡦⡧"
    "⠨⠩⠪⠫⠬⠭⠮⠯⡨⡩⡪⡫⡬⡭⡮⡯"
    "⠰⠱⠲⠳⠴⠵⠶⠷⡰⡱⡲⡳⡴⡵⡶⡷"
    "⠸⠹⠺⠻⠼⠽⠾⠿⡸⡹⡺⡻⡼⡽⡾⡿"
    "⢀⢁⢂⢃⢄⢅⢆⢇⣀⣁⣂⣃⣄⣅⣆⣇"
    "⢈⢉⢊⢋⢌⢍⢎⢏⣈⣉⣊⣋⣌⣍⣎⣏"
    "⢐⢑⢒⢓⢔⢕⢖⢗⣐⣑⣒⣓⣔⣕⣖⣗"
    "⢘⢙⢚⢛⢜⢝⢞⢟⣘⣙⣚⣛⣜⣝⣞⣟"
    "⢠⢡⢢⢣⢤⢥⢦⢧⣠⣡⣢⣣⣤⣥⣦⣧"
    "⢨⢩⢪⢫⢬⢭⢮⢯⣨⣩⣪⣫⣬⣭⣮⣯"
    "⢰⢱⢲⢳⢴⢵⢶⢷⣰⣱⣲⣳⣴⣵⣶⣷"
    "⢸⢹⢺⢻⢼⢽⢾⢿⣸⣹⣺⣻⣼⣽⣾⣿"
)


class VirtueCycle:
    def __init__(self, today=datetime.date.today(),
                 xlabels=days, ylabels=virtues,
                 precepts=precepts):
        virtuous_epoch = datetime.date.fromisoformat("1790-04-18")
        days_per_phase = len(xlabels)
        phases_per_cycle = len(ylabels)
        start_of_this_week = today + datetime.timedelta(days=-today.weekday())
        days_since_epoch = (start_of_this_week - virtuous_epoch).days
        phases_since_epoch = days_since_epoch // days_per_phase
        start_of_this_cycle = start_of_this_week + datetime.timedelta(
                weeks=-(phases_since_epoch % phases_per_cycle))

        ledger_path = virtuedir
        if len(sys.argv) > 1:
            ledger_path /= sys.argv[1]
        else:
            ledger_path /= start_of_this_cycle.isoformat()

        self.ledger_path = ledger_path
        self.epoch = start_of_this_week  # TODO: what if ledger path is a date?
        self.xlabels = xlabels
        self.ylabels = ylabels
        self.precepts = precepts
        self.signal = [[0] * len(xlabels) for _ in range(len(ylabels))]

        try:
            # TODO: pickling is molto pericoloso. watch out ;^) switch to
            # something fashionable like Cap'n Proto or CBOR.
            with open(self.ledger_path, "rb") as f:
                attrs = {"epoch", "xlabels", "ylabels", "precepts", "signal"}
                tmp = pickle.load(f)
                for a in dir(tmp):
                    if a in attrs:
                        setattr(self, a, getattr(tmp, a))
        except Exception:
            pass

    def __enter__(self):
        return self

    def __exit__(self, *args):
        os.makedirs(virtuedir, exist_ok=True)
        with open(self.ledger_path, "wb") as f:
            delattr(self, "ledger_path")
            pickle.dump(self, f)

    def mark(self, x, y):
        self.signal[y][x] += 1

    def unmark(self, x, y):
        self.signal[y][x] -= 1

    def reset(self, x, y):
        self.signal[y][x] = 0


class UI:
    xoff = 8
    yoff = 4
    xpad = 20
    ypad = 20
    fg = 16
    bg = 243
    xprecepts = 4

    def __init__(self, screen, virtue_cycle):
        curses.curs_set(False)
        curses.use_default_colors()
        for i in range(0, curses.COLORS):
            curses.init_pair(i + 1, i, -1)

        self.screen = screen
        self.signal = virtue_cycle
        self.cursor_to_today()

    def cursor_to_today(self):
        days = datetime.date.today() - self.signal.epoch
        self.y, self.x = divmod(days.days, 7)

    def move(self, dx=0, dy=0):
        self.x += dx
        self.y += dy

        hx = len(self.signal.xlabels)
        hy = len(self.signal.ylabels)

        if self.x >= hx:
            self.y += 1
            self.x = 0
        elif self.x < 0:
            self.x = hx - 1
            self.y -= 1

        if self.y >= hy:
            self.y = 0
        elif self.y < 0:
            self.y = hy - 1

    def draw_date(self):
        days = datetime.timedelta(days=7*self.y + self.x)
        cursor_date = self.signal.epoch + days

        self.screen.addstr(cursor_date.isoformat())

    def draw_row_labels(self):
        self.screen.move(UI.yoff, UI.xoff + UI.xpad)

        for k, label in enumerate(self.signal.xlabels):
            self.screen.addstr(
                    label,
                    curses.color_pair(UI.fg if k == self.x else UI.bg))

    @staticmethod
    def clamp(x, min, max):
        if x <= min:
            return min
        elif max <= x:
            return max
        else:
            return x

    def draw_signal(self):
        for k, marks in enumerate(self.signal.signal):
            self.screen.addstr(
                   5 + k, 8,
                   self.signal.ylabels[k],
                   curses.color_pair(
                       UI.fg if k == self.y else UI.bg))
            self.screen.move(5 + k, 20 + 8)  # magic numbers

            for m in marks:
                n = UI.clamp(m, 0, 8)
                self.screen.addstr(f" {pretty_binary[2**n - 1]}  ")

    def draw_precepts(self):
        self.screen.addstr(20, UI.xprecepts, self.signal.precepts[self.y])

    def draw(self):
        self.screen.clear()

        self.draw_date()
        self.draw_row_labels()
        self.draw_signal()
        self.draw_precepts()

        self.screen.refresh()

    def help(self):
        self.screen.clear()
        self.screen.addstr(4, 28, "hjkl to move")
        self.screen.addstr(5, 28, "+-=  to signal")
        self.screen.addstr(6, 28, "q    to quit")
        self.screen.getkey()

    def loop(self):
        moves = {
            "h": {"dx": -1},
            "l": {"dx": +1},
            "j": {"dy": +1},
            "k": {"dy": -1},
        }

        while True:
            self.draw()

            key = self.screen.getkey()
            if key in " =+":
                self.signal.mark(self.x, self.y)
            elif key in "hjkl":
                self.move(**moves[key])
            elif key == "-":
                self.signal.unmark(self.x, self.y)
            elif key == "r":
                self.screen.clear()
                self.screen.addsr(4, 20, "are you sure? (y/n)")
                key = self.screen.getkey()
                if key == "y":
                    self.signal.reset(self.x, self.y)
                self.draw()
            elif key == "t":
                self.cursor_to_today()
            elif key == "?":
                self.help()
            elif key == "q":
                break


def main(screen):
    with VirtueCycle() as cycle:
        UI(screen, cycle).loop()


if __name__ == "__main__":
    curses.wrapper(main)
